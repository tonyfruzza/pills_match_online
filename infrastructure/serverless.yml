service: DrRuby
provider:
  name: aws
  region: us-west-2
  runtime: ruby2.5
  memorySize: 128
  logRetentionInDays: 7
  variableSyntax: "\\${(?!AWS::)([ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
        - cloudwatch:ListMetrics
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - sqs:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        - Ref: MultiplexSNS
    - Effect: Allow
      Action:
        - sts:AssumeRole
      Resource:
        - !GetAtt [GameClientRole, Arn]
    - Effect: Allow
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource:
        - !GetAtt [GameState, Arn]
  environment:
    SQS_NAMESPACE: ${self:service}
    SNS_TOPIC_ARN: !Ref MultiplexSNS
    DDB_TABLE: !Ref GameState
    AWS_ACCOUNT_ID: !Ref AWS::AccountId

functions:
  DrRubyInfra:
    handler: new_game/multi_play.lambda_handler
    description: negociate a multiplayer game
    environment:
      USER_ROLE_ARN: !GetAtt [GameClientRole, Arn]
    events:
      - http:
          path: multiplay
          method: post
      - http:
          path: add_new_player
          method: post
  keep_alive:
    handler: keep_alive/ping.lambda_handler
    description: who is active
    logRetentionInDays: 1
    events:
      - sns:
          arn: !Ref MultiplexSNS
          topicName: ${self:service}Multiplexer
  the_reaper:
    handler: reaper/cleanup.lambda_handler
    description: remove old game resources
    logRetentionInDays: 1
    events:
      - schedule: rate(1 minute)
resources:
  Resources:
    MultiplexSNS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-Multiplexer
        TopicName: ${self:service}-${self:provider.stage}-Multiplexer
    GameState:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-GameState
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GameClientRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}ClientRole
        Description: Access to resrouces for clients to communicate
        MaxSessionDuration: 3600 # One hour
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole/${self:service}-${self:provider.stage}-DrRubyInfra"
              Action:
                - sts:AssumeRole
        Policies:
          -
            PolicyName: ${self:service}ClientPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action: sns:Publish
                  Resource: !Ref MultiplexSNS
                -
                  Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                  Resource: !Sub "arn:aws:sqs:${self:provider.region}:${AWS::AccountId}:${self:service}_*"
